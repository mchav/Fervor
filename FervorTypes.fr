module fervor.Types where

import frege.Prelude hiding (File, OutputStream)

type Handler = MutableIO HttpExchange -> IO ()

data URI = native java.net.URI where
	native getPath :: MutableIO URI -> IO String

data Locale = native java.util.Locale where
	native getDefault "java.util.Locale.getDefault" :: () -> STMutable s Locale

data SimpleDateFormat = native java.text.SimpleDateFormat where
	native new :: String -> Mutable s Locale -> STMutable s SimpleDateFormat

data Executor = native java.util.concurrent.Executor

data InetSocketAddress = native java.net.InetSocketAddress where
	native new :: Int -> STMutable s InetSocketAddress

data Headers = native com.sun.net.httpserver.Headers where
	native set :: MutableIO Headers -> String -> String -> IO ()

data URLConnection = native java.net.URLConnection where
	native getFileNameMap "java.net.URLConnection.getFileNameMap" :: () -> STMutable s FileNameMap

data FileNameMap = native java.net.FileNameMap where
	native getContentTypeFor :: Mutable s FileNameMap -> String -> ST s String

data HttpServer = native com.sun.net.httpserver.HttpServer where
	native create "com.sun.net.httpserver.HttpServer.create" :: Mutable s InetSocketAddress -> Int -> STMutable s HttpServer throws IOException
	native createContext :: MutableIO HttpServer -> String -> MutableIO HttpHandler -> IO ()
	native setExecutor :: MutableIO HttpServer -> Maybe Executor -> IO ()
	native start :: MutableIO HttpServer -> IO ()

data OutputStream = mutable native java.io.OutputStream where
	native write :: OutputStream -> ArrayOf RealWorld Byte -> IO () throws IOException
	native close :: OutputStream -> IO () throws IOException

data StringAsBytes = native java.lang.String where
  native getBytes :: String -> STMutable s (JArray Byte)

data HttpExchange = native com.sun.net.httpserver.HttpExchange where
	native getRequestURI :: Mutable s HttpExchange -> STMutable s URI
	native getResponseHeaders :: Mutable s HttpExchange -> STMutable s Headers
	native getResponseBody :: MutableIO HttpExchange -> IO OutputStream
	native sendResponseHeaders :: MutableIO HttpExchange -> Int -> Long -> IO () throws IOException

data HttpHandler = native com.sun.net.httpserver.HttpHandler where
	-- substitute for a constructor
	native new fervor.Types.Handler.newInstance :: Handler -> STMutable s HttpHandler 

data File = native java.io.File where
    native new                :: String -> STMutable s File
                              |  Mutable s File -> String -> STMutable s File
    pure native toURI         :: File -> URI
    pure native getPathF  getPath    :: File -> String
    
    --- Separator for elements of a path name, i.e. "/" on Unix
    pure native separator        java.io.File.separator
                              :: String
    --- Separator for elements of a path, i.e. ":" on Unix
    pure native pathSeparator    java.io.File.pathSeparator
                              :: String
    --- The (relative) path name. Not necessarily valid.
    native getPath       :: MutableIO File -> IO String
    native getAbsolutePath :: MutableIO File -> IO String
    native getCanonicalPath :: MutableIO File -> IO String throws IOException
    native getName       :: MutableIO File -> IO String
    native canRead       :: MutableIO File -> IO Bool
    native canWrite      :: MutableIO File -> IO Bool
    native isAbsolute    :: MutableIO File -> IO Bool
    native isDirectory   :: MutableIO File -> IO Bool
    native isFile        :: MutableIO File -> IO Bool
    native exists        :: MutableIO File -> IO Bool
    native mkdirs        :: MutableIO File -> IO Bool
    native delete        :: MutableIO File -> IO Bool
    native renameTo      :: MutableIO File -> MutableIO File -> IO Bool
    native lastModified  :: MutableIO File -> IO Long
    native length        :: MutableIO File -> IO Long
    native getParentFile :: MutableIO File -> IO (Maybe (MutableIO File))
    native list          :: MutableIO File -> IO (Maybe (MutableIO (JArray String)))
    native createTempFile java.io.File.createTempFile
                         :: String -> String -> IOMutable File
                                                throws IOException

pure native fileSeparator "java.io.File.separatorChar" :: Char

native module where {
	public static class Handler implements com.sun.net.httpserver.HttpHandler {
		final frege.run7.Func.U<com.sun.net.httpserver.HttpExchange,frege.run7.Func.U<RealWorld,Short>> handlerFunction;

		public Handler(frege.run7.Func.U<com.sun.net.httpserver.HttpExchange,frege.run7.Func.U<RealWorld,Short>> function){
			this.handlerFunction = function;
		}

		public static Handler newInstance(frege.run7.Func.U<com.sun.net.httpserver.HttpExchange,frege.run7.Func.U<RealWorld,Short>> function) {
			Handler h = new Handler(function);
			return h;
		}

		@Override
		public void handle(com.sun.net.httpserver.HttpExchange t) throws java.io.IOException {
			try {
				final Lazy<frege.run7.Func.U<RealWorld,Short>> args = handlerFunction.apply(Thunk.<com.sun.net.httpserver.HttpExchange>lazy(t)).call();
				final frege.run7.Func.U<Object,Short> res = RunTM.<frege.run7.Func.U<Object,Short>>cast(args).call();
				frege.prelude.PreludeBase.TST.run(res).call();
			} catch (Exception e) {
				System.out.println("Failed to execute handler");
			}
			
		}
	}
}
