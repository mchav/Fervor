module Fervor where

import fervor.Types

import frege.Prelude hiding (OutputStream)

footer :: String
footer = unlines ["</tbody>", "</table>", "</div>", "</body>", "</html>"]

writeResponse :: MutableIO HttpExchange -> Int -> String -> IO ()
writeResponse t res message = do
	let len = if res == 404 then 0 else (length message).long
	t.sendResponseHeaders res len
	os <- t.getResponseBody
	bytes <- StringAsBytes.getBytes message
	os.write bytes
	os.close

display404 :: MutableIO HttpExchange -> String -> IO ()
display404 t path = do
	let message = "404 Not Found " ++ path
	writeResponse t 404 message

setResponseHeaders :: MutableIO HttpExchange -> MutableIO File -> IO ()
setResponseHeaders t file = do
	responseHeaders <- t.getResponseHeaders
	htmlMime <- isHtmlMime file
	let mimeType = if htmlMime then "text/html; charset=UTF-8" else "text/plain; charset=UTF-8"
	responseHeaders.set "Content-Type" mimeType

showFileList :: MutableIO File -> IO String
showFileList file = do
	header <- readFile "header.html"
	array <- file.list
	path <- file.getPath
	fileList <- listFiles array path
	return (header ++ fileList ++ footer)

listFiles :: Maybe (MutableIO (JArray String)) -> String -> IO String
listFiles files path = case files of
					Just f -> formatFileList f path
					Nothing -> return ""

formatFileList :: MutableIO (JArray String) -> String -> IO String
formatFileList files path = do
	ls <- readonly toList files
	return (unlines $ map (format path) ls)

format :: String -> String -> String
format path s = "\n\t\t<td><a href='" ++ path ++ s ++ "'>" ++ s ++ "</a></td>" ++ "<td> </td>" ++ "<td>" ++ (show s.length) ++ "</td>" ++ "<td> </td>\n\t</tr>"

processPage :: MutableIO HttpExchange -> MutableIO File -> IO ()
processPage t file = do
	setResponseHeaders t file
	isFile <- file.isFile
	page <- if isFile then (file.getName >>= readFile) else (showFileList file)
	writeResponse t 200 page

isHtmlMime :: MutableIO File -> IO Bool
isHtmlMime file = do
	isDirectory <- file.isDirectory
	fileName <- file.getName
	return $ isDirectory || fileName.contains ".htm"

handle :: MutableIO HttpExchange -> IO ()
handle t = do
	uri <- t.getRequestURI
	targetPath <- uri.getPath
	fileFolder <- File.new "."
	targetFile <- File.new fileFolder (targetPath.replace '/' fileSeparator)
	targetExists <- targetFile.exists
	if targetExists then processPage t targetFile else (targetFile.getPath >>= \path -> display404 t path) 

main args = do
	inet <- InetSocketAddress.new 8000
	server <- HttpServer.create inet 0
	handler <- HttpHandler.new handle
	server.createContext "/" handler
	server.start
	println "Serving HTTP on 0.0.0.0 port 8000"
