module Fervor where

import fervor.Types

import frege.Prelude hiding (File, OutputStream)

data FileAttributes = Attributes {name:: String, isDirectory :: Bool, size:: Long}

footer :: String
footer = unlines ["</tbody>", "</table>", "</div>", "</body>", "</html>"]

header :: String
header = unlines ["<html>", "<head>", "<title> List of files/dirs </title>", "</head>", "<body>", "<h1>File List</h1>", "<table>",
          "<caption>Directory Listing</caption>", "<thead>", "<tr>", "<th>File</th>", "<th> Dir ? </th>", "<th>Size</th>",
		  "<th>Date</th>", "</tr>", "</thead>", "<tfoot>", "<tr>", "<th>File</th>", "<th>Dir ?</th>", "<th> Size</th>",
		  "<th>Date</th>", "</tr>", "</tfoot>", "<tbody>"]

writeResponse :: MutableIO HttpExchange -> Int -> String -> IO ()
writeResponse t res message = do
	let len = if res == 404 then 0 else (length message).long
	t.sendResponseHeaders res len
	os <- t.getResponseBody
	bytes <- StringAsBytes.getBytes message
	os.write bytes
	os.close

display404 :: MutableIO HttpExchange -> String -> IO ()
display404 t path = do
	let message = "404 Not Found " ++ path
	writeResponse t 404 message

setResponseHeaders :: MutableIO HttpExchange -> MutableIO File -> IO ()
setResponseHeaders t file = do
	responseHeaders <- t.getResponseHeaders
	htmlMime <- isHtmlMime file
	let mimeType = if htmlMime then "text/html; charset=UTF-8" else "text/plain; charset=UTF-8"
	responseHeaders.set "Content-Type" mimeType

showFileList :: String -> [FileAttributes] -> String
showFileList path fileList = header ++ (unlines $ map (format path) fileList) ++ footer

format :: String -> FileAttributes -> String
format path f = "\n\t\t<td> <a href='" ++ path ++ f.name ++ 
			    (if f.isDirectory then "/" else "") ++ "'>" ++ f.name ++ "</a></td>" ++
				"<td>" ++ (if f.isDirectory then "Y" else "N") ++ "</td>" ++
				"<td>" ++ (show f.size) ++ "</td>" ++ "<td> </td>\n\t</tr>"

processPage :: MutableIO HttpExchange -> String -> MutableIO File -> IO ()
processPage t path file = do
	setResponseHeaders t file
	isFile <- file.isFile
	page <- if isFile then (file.getName >>= readFile) else (getAttributeList file >>= \a -> return (showFileList path a))
	writeResponse t 200 page

getAttributeList :: MutableIO File -> IO [FileAttributes]
getAttributeList f = do
	(Just files) <- f.list
	ls <- readonly toList files
	lif <- listFileAttribute (\x -> x.isDirectory) ls
	lfs <- listFileAttribute (\x -> x.length) ls
	let ls' = map (\(a, b, c) -> Attributes {name = a, isDirectory = b, size = c}) (zip3 ls (reverse lif) (reverse lfs))
	return ls'

listFileAttribute :: (MutableIO File -> IO a) -> [String] -> IO [a]
listFileAttribute f xs = listFileAttribute' f xs (return [])

listFileAttribute' :: (MutableIO File -> IO a) -> [String] -> IO [a] -> IO [a]
listFileAttribute' _ [] xs = xs
listFileAttribute' attr (f:fs) xs = do
	file <- File.new f
	isfile <- attr file
	lst <- xs
	listFileAttribute' attr fs (return (isfile : lst))

isHtmlMime :: MutableIO File -> IO Bool
isHtmlMime file = do
	isDirectory <- file.isDirectory
	fileName <- file.getName
	return $ isDirectory || fileName.contains ".htm"

handle :: Handler
handle t = do
	uri <- t.getRequestURI
	targetPath <- uri.getPath
	fileFolder <- File.new "."
	targetFile <- File.new fileFolder (targetPath.replace '/' fileSeparator)
	targetExists <- targetFile.exists
	if targetExists then processPage t targetPath targetFile else (targetFile.getPath >>= \path -> display404 t path) 

main args = do
	inet <- InetSocketAddress.new 8000
	server <- HttpServer.create inet 0
	handler <- HttpHandler.new handle
	server.createContext "/" handler
	server.start
	println "Serving HTTP on 0.0.0.0 port 8000"
